{"meta":{"title":"YunXi's blog","subtitle":null,"description":"Whatever is worth doing is worth doing well","author":"YunXi","url":"https://yunxi97.github.io"},"pages":[{"title":"about","date":"2018-09-19T11:24:16.000Z","updated":"2018-09-19T12:30:52.604Z","comments":true,"path":"about/index.html","permalink":"https://yunxi97.github.io/about/index.html","excerpt":"","text":"关于我从事 java 开发，主要开发语言 java，熟悉使用 Myeclipse 热爱开源项目、热爱新技术、热爱新事物。 关于学习正在往终身学习者前进…近期学习方向： 关于座右铭 Whatever is worth doing is worth doing well. (任何值得做的事都值得把它做好!) 关于爱好热爱运动，尤其喜爱乒乓球、电影、旅行、美剧。 联系我 Blog: yunxi Email: 1032406383@qq.com GitHub: yunxi WeiBo: yunxi"}],"posts":[{"title":"MySQL数据库操作","slug":"MySQL子查询","date":"2018-09-18T16:00:00.000Z","updated":"2018-09-19T13:34:52.453Z","comments":true,"path":"2018/09/19/MySQL子查询/","link":"","permalink":"https://yunxi97.github.io/2018/09/19/MySQL子查询/","excerpt":"","text":"#MySQL中的子查询 ##一、子查询定义 定义： 子查询允许把一个查询嵌套在另一个查询当中。 子查询，又叫内部查询，相对于内部查询，包含内部查询的就称为外部查询。 子查询可以包含普通select可以包括的任何子句，比如：distinct、 group by、order by、limit、join和union等；但是对应的外部查询必须是以下语句之一： select、insert、update、delete、set或 者do。 子查询的位置： select 中、from 后、where 中.group by 和order by 中无实用意义。 ##二、子查询分类 ###子查询分为如下几类： 标量子查询：返回单一值的标量，最简单的形式。 列子查询：返回的结果集是 N 行一列。 行子查询：返回的结果集是一行 N 列。 表子查询：返回的结果集是 N 行 N 列。 可以使用的操作符： = &gt; &lt; &gt;= &lt;= &lt;&gt; ANY IN SOME ALL EXISTS 一个子查询会返回一个标量（就一个值）、一个行、一个列或一个表，这些子查询称之为标量、行、列和表子查询。 如果子查询返回一个标量值（就一个值），那么外部查询就可以使用：=、&gt;、&lt;、&gt;=、&lt;=和&lt;&gt;符号进行比较判断；如果子查询返回的不是一个标量值，而外部查询使用了比较符和子查询的结果进行了比较，那么就会抛出异常。 #####1. 标量子查询： 是指子查询返回的是单一值的标量，如一个数字或一个字符串，也是子查询中最简单的返回形式。 可以使用 = &gt; &lt; &gt;= &lt;= &lt;&gt; 这些操作符对子查询的标量结果进行比较，通常子查询的位置在比较式的右侧 #######示例： SELECT * FROM article WHERE uid = (SELECT uid FROM user WHERE status=1 ORDER BY uid DESC LIMIT 1)` SELECT * FROM t1 WHERE column1 = (SELECT MAX(column2) FROM t2)` SELECT * FROM article AS t WHERE 2 = (SELECT COUNT(*) FROM article WHERE article.uid = t.uid)` #####2. MySQL 列子查询： 指子查询返回的结果集是 N 行一列，该结果通常来自对表的某个字段查询返回。 可以使用 = &gt; &lt; &gt;= &lt;= &lt;&gt; 这些操作符对子查询的标量结果进行比较，通常子查询的位置在比较式的右侧 可以使用 IN、ANY、SOME 和 ALL 操作符，不能直接使用 = &gt; &lt; &gt;= &lt;= &lt;&gt; 这些比较标量结果的操作符。 #######示例： SELECT * FROM article WHERE uid IN(SELECT uid FROM user WHERE status=1)` SELECT s1 FROM table1 WHERE s1 &gt; ANY (SELECT s2 FROM table2)` SELECT s1 FROM table1 WHERE s1 &gt; ALL (SELECT s2 FROM table2)` NOT IN 是 &lt;&gt; ALL 的别名，二者相同。 特殊情况 如果 table2 为空表，则 ALL 后的结果为 TRUE； 如果子查询返回如 (0,NULL,1) 这种尽管 s1 比返回结果都大，但有空行的结果，则 ALL 后的结果为 UNKNOWN 。 #######注意：对于 table2 空表的情况，下面的语句均返回 NULL： SELECT s1 FROM table1 WHERE s1 &gt; (SELECT s2 FROM table2)` SELECT s1 FROM table1 WHERE s1 &gt; ALL (SELECT MAX(s1) FROM table2)` #####3. MySQL 行子查询： 指子查询返回的结果集是一行 N 列，该子查询的结果通常是对表的某行数据进行查询而返回的结果集。 #######例子： SELECT FROM table1 WHERE (1,2) = (SELECT column1, column2 FROM table2)`注：(1,2) 等同于 row(1,2) SELECT FROM article WHERE (title,content,uid) = (SELECT title,content,uid FROM blog WHERE bid=2)` #####4. MySQL 表子查询： 指子查询返回的结果集是 N 行 N 列的一个表数据。 #######例子： SELECT * FROM article WHERE (title,content,uid) IN (SELECT title,content,uid FROM blog) ##三、字查询例举 #####1. ANY进行子查询 any关键词的意思是“对于子查询返回的列中的任何一个数值，如果比较结果为TRUE，就返回TRUE”。 好比“10 &gt;any(11, 20, 2, 30)”，由于10&gt;2，所以，该该判断会返回TRUE；只要10与集合中的任意一个进行比较，得到TRUE时，就会返回TRUE。 select table1.customer_id,city,count(order_id) from table1 join table2 on table1.customer_id=table2.customer_id where table1.customer_id&lt;&gt;&apos;tx&apos; and table1.customer_id&lt;&gt;&apos;9you&apos; group by customer_id having count(order_id) &gt; any ( select count(order_id) from table2 where customer_id=&apos;tx&apos; or customer_id=&apos;9you&apos; group by customer_id); any的意思比较好明白，直译就是任意一个，只要条件满足任意的一个，就返回TRUE。 #####2. 使用IN进行子查询 使用in进行子查询，这个我们在日常写sql的时候是经常遇到的。in的意思就是指定的一个值是否在这个集合中，如何在就返回TRUE；否则就返回FALSE了。 in是“=any”的别名，在使用“=any”的地方，我们都可以使用“in”来进行替换。 有了in，肯定就有了not in；not in并不是和&lt;&gt;any是同样的意思，not in和&lt;&gt;all是一个意思。 #####3. 使用SOME进行子查询 some是any的别名，用的比较少。 #####4. 使用ALL进行子查询 all必须与比较操作符一起使用。all的意思是“对于子查询返回的列中的所有值，如果比较结果为TRUE，则返回TRUE”。 好比“10 &gt;all(2, 4, 5, 1)”，由于10大于集合中的所有值，所以这条判断就返回TRUE；而如果为“10 &gt;all(20, 3, 2, 1, 4)”，这样的话，由于10小于20，所以该判断就会返回FALSE。 &lt;&gt;all的同义词是not in，表示不等于集合中的所有值，这个很容易和&lt;&gt;any搞混，平时多留点心就好了。 #####5.标量子查询 根据子查询返回值的数量，将子查询可以分为标量子查询和多值子查询。在使用比较符进行子查询时，就要求必须是标量子查询；如果是多值子查询时，使用比较符，就会抛出异常。 #####6. 多值子查询 与标量子查询对应的就是多值子查询了，多值子查询会返回一列、一行或者一个表，它们组成一个集合。我们一般使用的any、in、all和some等词，将外部查询与子查询的结果进行判断。如果将any、in、all和some等词与标量子查询，就会得到空的结果。 #####7. 独立子查询 独立子查询是不依赖外部查询而运行的子查询。什么叫依赖外部查询？先看下面两个sql语句。 ######sql语句1：获得所有hangzhou顾客的订单号。 select order_id from table2 where customer_id in (select customer_id from table1 where city=&apos;hangzhou&apos;); ######sql语句2：获得城市为hangzhou，并且存在订单的用户。 select * from table1 where city=&apos;hangzhou&apos; and exists (select * from table2 where table1.customer_id=table2.customer_id); 上面的两条sql语句，虽然例子举的有点不是很恰当，但是足以说明这里的问题了。 对于sql语句1，我们将子查询单独复制出来，也是可以单独执行的，就是子查询与外部查询没有任何关系。 对于sql语句2，我们将子查询单独复制出来，就无法单独执行了，由于sql语句2的子查询依赖外部查询的某些字段，这就导致子查询就依赖外部查询，就产生了相关性。 对于子查询，很多时候都会考虑到效率的问题。当我们执行一个select语句时，可以加上explain关键字，用来查看查询类型，查询时使用的索引以及其它等等信息。比如这么用： explain select order_id from table2 where customer_id in (select customer_id from table1 where city=&apos;hangzhou&apos;); 使用独立子查询，如果子查询部分对集合的最大遍历次数为n，外部查询的最大遍历次数为m时，我们可以记为：O(m+n)。而如果使用相关子查询，它的遍历 次数可能会达到O(m+m*n)。可以看到，效率就会成倍的下降；所以，大伙在使用子查询时，一定要考虑到子查询的相关性。 #####8.相关子查询 相关子查询是指引用了外部查询列的子查询，即子查询会对外部查询的每行进行一次计算。但是在MySQL的内部，会进行动态优化，会随着情况的不同会 有所不同。使用相关子查询是最容易出现性能的地方。而关于sql语句的优化，这又是一个非常大的话题了，只能通过实际的经验积累，才能更好的去理解如何进 行优化。 #####9.EXISTS谓词 EXISTS是一个非常牛叉的谓词，它允许数据库高效地检查指定查询是否产生某些行。根据子查询是否返回行，该谓词返回TRUE或FALSE。与其 它谓词和逻辑表达式不同的是，无论输入子查询是否返回行，EXISTS都不会返回UNKNOWN，对于EXISTS来说，UNKNOWN就是FALSE。 还是上面的语句，获得城市为hangzhou，并且存在订单的用户。 select * from table1 where city=&apos;hangzhou&apos; and exists (select * from table2 where table1.customer_id=table2.customer_id); 关于IN和EXISTS的主要区别在于三值逻辑的判断上。EXISTS总是返回TRUE或FALSE，而对于IN，除了TRUE、FALSE值外， 还有可能对NULL值返回UNKNOWN。但是在过滤器中，UNKNOWN的处理方式与FALSE相同，因此使用IN与使用EXISTS一样，SQL优化 器会选择相同的执行计划。 说到了IN和EXISTS几乎是一样的，但是，就不得不说到NOT IN和NOT EXISTS，对于输入列表中包含NULL值时，NOT EXISTS和NOT IN之间的差异就表现的非常大了。输入列表包含NULL值时，IN总是返回TRUE和UNKNOWN，因此NOT IN就会得到NOT TRUE和NOT UNKNOWN，即FALSE和UNKNOWN。 #####10. 派生表 上面也说到了，在子查询返回的值中，也可能返回一个表，如果将子查询返回的虚拟表再次作为FROM子句的输入时，这就子查询的虚拟表就成为了一个派生表。 #######语法结构如下： FROM (subquery expression) AS derived_table_alias 由于派生表是完全的虚拟表，并没有也不可能被物理地具体化。 ##四、子查询优化 很多查询中需要使用子查询。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死。子查询可以使查询语 句很灵活，但子查询的执行效率不高。 子查询时，MySQL需要为内层查询语句的查询结果建立一个临时表。然后外层查询语句再临时表中查询记录。查询完毕 后，MySQL需要撤销这些临时表。因此，子查询的速度会受到一定的影响。如果查询的数据量比较大，这种影响就会随之增大。 在MySQL中可以使用连接查 询来替代子查询。连接查询不需要建立临时表，其速度比子查询要快。 使用连接(JOIN)来代替子查询，如： #######例子1： SELECT * FROM t1 WHERE t1.a1 NOT in (SELECT a2 FROM t2 ) #######优化后： SELECT * FROM t1 LEFT JOIN t2 ON t1.a1=t2.a2 WHERE t2.a2 IS NULL #####例子2：SELECT FROM article WHERE (title,content,uid) IN (SELECT title,content,uid FROM blog)优化后：SELECT FROM articleinner join blogon (article.title=blog.title AND article.content=blog.content AND article.uid=blog.uid) ###不能优化的子查询： ######1、mysql不支持子查询合并和聚合函数子查询优化，mariadb对聚合函数子查询进行物化优化； ######2、mysql不支持from子句子查询优化，mariadb对from子句子查询进行子查询上拉优化； ######3、mysql和mariadb对子查询展开提供有限的支持，如对主键的操作才能进行上拉子查询优化； ######4、mysql不支持exists子查询优化，mariadb对exists关联子查询进行半连接优化，对exists非关联子查询没有进一步进行优化； ######5、mysql和mariadb不支持not exists子查询优化； ######6、mysql和mariadb对in子查询，对满足半连接语义的查询进行半连接优化，再基于代价评估进行优化，两者对半连接的代价评估选择方式有差异； ######7、mysql不支持not in子查询优化，mariadb对非关联not in子查询使用物化优化，对关联not in子查询不做优化； ######8、mysql和mariadb对&gt;all非关联子查询使用max函数，&lt;all非关联子查询使用min函数，对=all和非关联子查询使用exists优化； ######9、对&gt;some和&gt;any非关联子查询使用min函数，对&lt;some和&lt;any非关联子查询使用max函数，=any 和=some子查询使用半连接进行优化，对&gt;some和&gt;any关联子查询以及&lt;some和&lt;any关联子查询只有exists 优化。","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://yunxi97.github.io/categories/MySQL/"}],"tags":[{"name":"子查询","slug":"子查询","permalink":"https://yunxi97.github.io/tags/子查询/"}]},{"title":"MySQL数据库操作","slug":"MySQL操作","date":"2018-09-17T16:00:00.000Z","updated":"2018-09-19T12:45:48.150Z","comments":true,"path":"2018/09/18/MySQL操作/","link":"","permalink":"https://yunxi97.github.io/2018/09/18/MySQL操作/","excerpt":"##用户管理： 1、新建用户： &gt;CREATE USER name IDENTIFIED BY ‘ssapdrow’; 2、更改密码：","text":"##用户管理： 1、新建用户： &gt;CREATE USER name IDENTIFIED BY ‘ssapdrow’; 2、更改密码： &gt;SET PASSWORD FOR name=PASSWORD(‘fdddfd’); 3、权限管理 &gt;SHOW GRANTS FOR name; //查看name用户权限 &gt;GRANT SELECT ON db_name.* TO name; //给name用户db_name数据库的所有权限 &gt;REVOKE SELECT ON db_name.* TO name; //GRANT的反操作，去除权限； ##一、数据库操作： 1、查看数据库： &gt;SHOW DATABASES; 2、创建数据库： &gt;CREATE DATABASE db_name; //db_name为数据库名 3、使用数据库： &gt;USE db_name; 4、删除数据库： &gt;DROP DATABASE db_name; ##二、创建表： 1、创建表： &gt;CREATE TABLE table_name( &gt;id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT, //id值，无符号、非空、递增——唯一性，可做主键。 &gt;name VARCHAR(60) NOT NULL &gt;score TINYINT UNSIGNED NOT NULL DEFAULT 0, //设置默认列值 &gt;PRIMARY KEY(id) &gt;)ENGINE=InnoDB //设置表的存储引擎，一般常用InnoDB和MyISAM；InnoDB可靠，支持事务；MyISAM高效不支持全文检索 &gt;DEFAULT charset=utf8; //设置默认的编码，防止数据库中文乱码 如果有条件的创建数据表还可以使用 &gt;CREATE TABLE IF NOT EXISTS tb_name(…….. 2、复制表： &gt;CREATE TABLE tb_name2 SELECT * FROM tb_name; 或者部分复制： &gt;CREATE TABLE tb_name2 SELECT id,name FROM tb_name; 3、创建临时表： &gt;CREATE TEMPORARY TABLE tb_name(这里和创建普通表一样); 4、查看数据库中可用的表： &gt;SHOW TABLES; 5、查看表的结构： &gt;DESCRIBE tb_name; 也可以使用： &gt;SHOW COLUMNS in tb_name; //from也可以 6、删除表： &gt;DROP [ TEMPORARY ] TABLE [ IF EXISTS ] tb_name[ ,tb_name2…….]; 实例： &gt;DROP TABLE IF EXISTS tb_name; 7、表重命名： &gt;RENAME TABLE name_old TO name_new; 还可以使用： &gt;ALTER TABLE name_old RENAME name_new; ##三、修改表： 1、更改表结构： &gt;ALTER TABLE tb_name ADD[CHANGE,RENAME,DROP] …要更改的内容… 实例： &gt;ALTER TABLE tb_name ADD COLUMN address varchar(80) NOT NULL; &gt;ALTER TABLE tb_name DROP address; &gt;ALTER TABLE tb_name CHANGE score score SMALLINT(4) NOT NULL; ##四、插入数据： 1、插入数据： &gt;INSERT INTO tb_name(id,name,score)VALUES(NULL,’张三’,140),(NULL,’张四’,178),(NULL,’张五’,134); 这里的插入多条数据直接在后边加上逗号，直接写入插入的数据即可；主键id是自增的列，可以不用写。 2、插入检索出来的数据： &gt;INSERT INTO tb_name(name,score) SELECT name,score FROM tb_name2; ##五、更新数据： 1、指定更新数据： &gt;UPDATE tb_name SET score=189 WHERE id=2; &gt;UPDATE tablename SET columnName=NewValue [ WHERE condition ] ##六、删除数据： 1、删除数据： &gt;DELETE FROM tb_name WHERE id=3; ##七、条件控制： 1、WHERE 语句： &gt;SELECT * FROM tb_name WHERE id=3; 2、HAVING 语句： &gt;SELECT FROM tb_name GROUP BY score HAVING count()&gt;2 3、相关条件控制符： =、&gt;、&lt;、&lt;&gt;、IN(1,2,3……)、BETWEEN a AND b、NOT AND 、OR Linke()用法中 % 为匹配任意、 _ 匹配一个字符（可以是汉字） IS NULL 空值检测 ##八、MySQL的正则表达式： 1、Mysql支持REGEXP的正则表达式： &gt;SELECT * FROM tb_name WHERE name REGEXP ‘^[A-D]’ //找出以A-D 为开头的name 2、特殊字符需要转义。 ##九、MySQL的一些函数： 1、字符串链接——CONCAT() &gt;SELECT CONCAT(name,’=&gt;’,score) FROM tb_name 2、数学函数： AVG、SUM、MAX、MIN、COUNT； 3、文本处理函数： TRIM、LOCATE、UPPER、LOWER、SUBSTRING 4、运算符： +、-、*、\\ 5、时间函数： DATE()、CURTIME()、DAY()、YEAR()、NOW()….. ##十、分组查询： 1、分组查询可以按照指定的列进行分组： &gt;SELECT COUNT() FROM tb_name GROUP BY score HAVING COUNT()&gt;1; 2、条件使用Having； 3、ORDER BY 排序： ORDER BY DESC|ASC =&gt;按数据的降序和升序排列 ##十一、UNION规则——可以执行两个语句（可以去除重复行） ##十二、全文检索——MATCH和AGAINST 1、SELECT MATCH(note_text)AGAINST(‘PICASO’) FROM tb_name; 2、InnoDB引擎不支持全文检索，MyISAM可以； ##十三、视图 1、创建视图 &gt;CREATE VIEW name AS SELECT * FROM tb_name WHERE ~~ ORDER BY ~~; 2、视图的特殊作用： a、简化表之间的联结（把联结写在select中）； b、重新格式化输出检索的数据（TRIM，CONCAT等函数）； c、过滤不想要的数据（select部分） d、使用视图计算字段值，如汇总这样的值。 ##十四、使用存储过程： 个人理解，存储过程就是一个自定义函数，有局部变量参数，可传入参数，可以返回值，不过这语法够呆滞的123456789101112131415161718192021222324252627282930 1、创建存储过程： &gt;CREATE PROCEDURE pro( &gt;IN num INT,OUT total INT) &gt;BEGIN &gt;SELECT SUM(score) INTO total FROM tb_name WHERE id=num; &gt;END; *这里的 IN (传递一个值给存储过程)，OUT（从存储过程传出一个值），INOUT（对存储过程传入、传出），INTO（保存变量） 2、调用存储过程： &gt;CALL pro(13,@total) //这里的存储过程两个变量，一个是IN一个是OUT，这里的OUT也是需要写上的，不写会出错 &gt;SELECT @total //这里就可以看到结果了； 3、存储过程的其他操作： &gt;SHOW PROCEDURE STATUS; //显示当期的存储过程 &gt;DROP PROCEDURE pro; //删除指定存储过程##十五、使用游标： 对这个理解不是很懂，朋友多多指点哦 1、游标的操作 &gt;CREATE PROCEDURE pro() &gt;BEGIN &gt;DECLARE ordername CURSOR FOR &gt;SELECT order_num FROM orders; &gt;END; &gt;OPEN ordername; //打开游标 &gt;CLOSE ordername; //关闭游标 ##十六、触发器： 触发器是指在进行某项指定操作时，触发触发器内指定的操作； 1、支持触发器的语句有DELETE、INSERT、UPDATE,其他均不支持 2、创建触发器： &gt;CREATE TRIGGER trig AFTER INSERT ON ORDERS FOR EACH ROW SELECT NEW.orser_name; &gt;INSERT语句，触发语句，返回一个值 3、删除触发器 &gt;DROP TRIGGER trig; ##十七、语法整理： 1、ALTER TABLE（修改表） ALTER TABLE table_name ( ADD column datatype [ NULL | NOT NULL ] [ CONSTRAINTS ] CHANGE column datatype COLUMNS [ NULL | NOT NULL ] [ CONSTRAINTS ] DROP column， 。。。。 ) 2、COMMIT(处理事务) &gt;COMMIT; 3、CREATE INDEX(在一个或多个列上创建索引) CREATE INDEX index_name ON tb_name (column [ ASC | DESC ] , …….); 4、CREATE PROCEDURE (创建存储过程) CREATE PROCEDURE pro([ parameters ]) BEGIN …….. END 5、CREATE TABLE(创建表) CREATE TABLE tb_name( column_name datetype [ NULL | NOT NULL ] [ condtraints] , column_name datetype [ NULL | NOT NULL ] [ condtraints] , ……. PRIMARY KEY( column_name ) )ENGINE=[ InnoDB | MyiSAM ]DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ; 6、CREATE USER(创建用户) CREATE USER user_name [ @hostname ] [ IDENTIFIED BY [ PASSWORD ] ‘pass_word’ ]; 7、CREATE VIEW （在一个或多个表上创建视图） CREATE [ OR REPLACE ] VIEW view_name AS SELECT。。。。。。 8、DELETE (从表中删除一行或多行) DELETE FROM table_name [WHERE ……] 9、DROP(永久删除数据库及对象，如视图、索引等) DROP DATEBASE | INDEX | PROCEDURE | TABLE | TRIGGER | USER | VIEW name 10、INSERT （给表添加行） INSERT INTO tb_name [ ( columns,…… ) ] VALUES(value1,…………); 使用SELECT值插入： INSERT INTO tb_name [ ( columns,…… ) ] SELECT columns , ……. FROM tb_name [ WHERE …… ] ; 11、ROLLBACK（撤销一个事务处理块） ROLLBACK [ TO savapointname ]; 12、SAVEPOINT(为ROLLBACK设置保留点) SAVEPOINT sp1; 13、SELECT (检索数据，显示信息) SELECT column_name,…..FROM tb_name [ WHERE ] [ UNION ] [ RROUP BY ] [ HAVING ] [ ORDER BY ] 14、START TRANSACTION (一个新的事务处理块的开始) START TRANSACTION 15、UPDATE(更新一个表中的一行或多行) UPDATE tb_name SET column=value,……[ where ] ###【后记】MySQL数据库是一个十分轻便的数据库管理系统，相比大型的数据库管理系统如Oracle、MS-SQL ，MySQL更拥有轻便、灵活、开发速度快的特色，更适用于中小型数据的存储与架构。MySQL之所以能够被数以万计的网站采用，也是由此而来。","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://yunxi97.github.io/categories/MySQL/"}],"tags":[{"name":"操作大全","slug":"操作大全","permalink":"https://yunxi97.github.io/tags/操作大全/"}]},{"title":"Java面向对象","slug":"day06笔记","date":"2018-08-19T16:00:00.000Z","updated":"2018-09-20T11:29:15.882Z","comments":true,"path":"2018/08/20/day06笔记/","link":"","permalink":"https://yunxi97.github.io/2018/08/20/day06笔记/","excerpt":"","text":"###06.01_面向对象(面向对象思想概述)(了解) A:面向过程思想概述 第一步 第二步 B:面向对象思想概述 找对象(第一步,第二步) C:举例 买煎饼果子 洗衣服 D:面向对象思想特点 a:是一种更符合我们思想习惯的思想 b:可以将复杂的事情简单化 c:将我们从执行者变成了指挥者 角色发生了转换 E:面向对象开发 就是不断的创建对象，使用对象，指挥对象做事情。 F:面向对象设计 其实就是在管理和维护对象之间的关系。 G:面向对象特征 封装(encapsulation) 继承(inheritance) 多态(polymorphism) ###06.02_面向对象(类与对象概述)(掌握) A:我们学习编程是为了什么 为了把我们日常生活中实物用学习语言描述出来 B:我们如何描述现实世界事物 属性 就是该事物的描述信息(事物身上的名词) 行为 就是该事物能够做什么(事物身上的动词) C:Java中最基本的单位是类,Java中用class描述事物也是如此 成员变量 就是事物的属性 成员方法 就是事物的行为 D:定义类其实就是定义类的成员(成员变量和成员方法) a:成员变量 和以前定义变量是一样的，只不过位置发生了改变。在类中，方法外。 b:成员方法 和以前定义方法是一样的，只不过把static去掉，后面在详细讲解static的作用。 E:类和对象的概念 a:类：是一组相关的属性和行为的集合 b:对象：是该类事物的具体体现 c:举例： 类 学生 对象 具体的某个学生就是一个对象 ###06.03_面向对象(学生类的定义)(掌握) A:学生事物 B:学生类 C:案例演示 属性:姓名,年龄,性别 行为:学习,睡觉 ###06.04_面向对象(手机类的定义)(掌握) 模仿学生类，让学生自己完成 属性:品牌(brand)价格(price) 行为:打电话(call),发信息(sendMessage)玩游戏(playGame) ###06.05_面向对象(学生类的使用)(掌握) A:文件名问题 在一个java文件中写两个类：一个基本的类，一个测试类。 建议：文件名称和测试类名称一致。 B:如何使用对象? 创建对象并使用 格式：类名 对象名 = new 类名(); D:如何使用成员变量呢? 对象名.变量名 E:如何使用成员方法呢? 对象名.方法名(…) ###06.06_面向对象(手机类的使用)(掌握) A:学生自己完成 模仿学生类，让学生自己完成 ###06.07_面向对象(一个对象的内存图)(掌握) A:画图演示 一个对象 ###06.08_面向对象(二个对象的内存图)(了解) A:画图演示 二个不同的对象 ###06.09_面向对象(三个引用两个对象的内存图)(了解) A:画图演示 三个引用，有两个对象的引用指向同一个地址 ###06.10_面向对象(成员变量和局部变量的区别)(掌握) A:在类中的位置不同 成员变量：在类中方法外 局部变量：在方法定义中或者方法声明上 B:在内存中的位置不同 成员变量：在堆内存(成员变量属于对象,对象进堆内存) 局部变量：在栈内存(局部变量属于方法,方法进栈内存) C:生命周期不同 成员变量：随着对象的创建而存在，随着对象的消失而消失 局部变量：随着方法的调用而存在，随着方法的调用完毕而消失 D:初始化值不同 成员变量：有默认初始化值 局部变量：没有默认初始化值，必须定义，赋值，然后才能使用。 注意事项： 局部变量名称可以和成员变量名称一样，在方法中使用的时候，采用的是就近原则。 基本数据类型变量包括哪些:byte,short,int,long,float,double,boolean,char 引用数据类型变量包括哪些:数组,类,接口,枚举 ###06.11_面向对象(方法的形式参数是类名的时候如何调用)(掌握) A:方法的参数是类名public void print(Student s){}//print(new Student()); 如果你看到了一个方法的形式参数是一个类类型(引用类型)，这里其实需要的是该类的对象。 ###06.12_面向对象(匿名对象的概述和应用)(掌握) A:什么是匿名对象 没有名字的对象 B:匿名对象应用场景 a:调用方法，仅仅只调用一次的时候。 那么，这种匿名调用有什么好处吗? 节省代码 注意：调用多次的时候，不适合。匿名对象调用完毕就是垃圾。可以被垃圾回收器回收。 b:匿名对象可以作为实际参数传递 C:案例演示 匿名对象应用场景 ###06.13_面向对象(封装的概述)(掌握) A:封装概述 是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。 B:封装好处 隐藏实现细节，提供公共的访问方式 提高了代码的复用性 提高安全性。 C:封装原则 将不需要对外提供的内容都隐藏起来。 把属性隐藏，提供公共方法对其访问。 ###06.14_面向对象(private关键字的概述和特点)(掌握) A:人类赋值年龄的问题 B:private关键字特点 a:是一个权限修饰符 b:可以修饰成员变量和成员方法 c:被其修饰的成员只能在本类中被访问 C:案例演示 封装和private的应用： A:把成员变量用private修饰 B:提供对应的getXxx()和setXxx()方法 private仅仅是封装的一种体现形式,不能说封装就是私有 ###06.15_面向对象(this关键字的概述和应用)(掌握) A:this关键字特点 代表当前对象的引用 B:案例演示 this的应用场景 用来区分成员变量和局部变量重名 ###06.16_面向对象(手机类代码及其测试)(掌握) A:学生练习 请把手机类写成一个标准类，然后创建对象测试功能。 class Demo2_Phone { public static void main(String[] args) { Phone p1 = new Phone(); p1.setBrand(&quot;三星&quot;); p1.setPrice(5288); System.out.println(p1.getBrand() + &quot;...&quot; + p1.getPrice()); p1.call(); p1.sendMessage(); p1.playGame(); } } /* 手机类 属性:品牌brand,价格price 行为:打电话call,发短信sendMessage,玩游戏,playGame */ class Phone { //java bean private String brand; //品牌 private int price; //价格 public void setBrand(String brand) { //设置品牌 this.brand = brand; } public String getBrand() { //获取品牌 return this.brand; //this.可以省略,你不加系统会默认给你加 } public void setPrice(int price) { //设置价格 this.price = price; } public int getPrice() { //获取价格 return price; } public void call() { //打电话 System.out.println(&quot;打电话&quot;); } public void sendMessage() { //发短信 System.out.println(&quot;发短信&quot;); } public void playGame() { //玩游戏 System.out.println(&quot;玩游戏&quot;); } }","categories":[{"name":"Java基础","slug":"Java基础","permalink":"https://yunxi97.github.io/categories/Java基础/"}],"tags":[{"name":"面向对象","slug":"面向对象","permalink":"https://yunxi97.github.io/tags/面向对象/"}]},{"title":"Java面向对象","slug":"day07笔记","date":"2018-08-19T16:00:00.000Z","updated":"2018-09-20T11:42:52.177Z","comments":true,"path":"2018/08/20/day07笔记/","link":"","permalink":"https://yunxi97.github.io/2018/08/20/day07笔记/","excerpt":"","text":"###07.01_面向对象(构造方法Constructor概述和格式)(掌握) A:构造方法概述和作用 给对象的数据(属性)进行初始化 B:构造方法格式特点 a:方法名与类名相同(大小也要与类名一致) b:没有返回值类型，连void都没有 c:没有具体的返回值return; ###07.02_面向对象(构造方法的重载及注意事项)(掌握) A:案例演示 构造方法的重载 重载:方法名相同,与返回值类型无关(构造方法没有返回值),只看参数列表 B:构造方法注意事项 a:如果我们没有给出构造方法，系统将自动提供一个无参构造方法。 b:如果我们给出了构造方法，系统将不再提供默认的无参构造方法。 注意：这个时候，如果我们还想使用无参构造方法，就必须自己给出。建议永远自己给出无参构造方法 ###07.03_面向对象(给成员变量赋值的两种方式的区别) A:setXxx()方法 修改属性值 B:构造方法 给对象中属性进行初始化 ###07.04_面向对象(学生类的代码及测试)(掌握) A:案例演示 学生类： 成员变量： name，age 构造方法： 无参，带两个参 成员方法： getXxx()/setXxx() show()：输出该类的所有成员变量值 B:给成员变量赋值： a:setXxx()方法 b:构造方法 C:输出成员变量值的方式： a:通过getXxx()分别获取然后拼接 b:通过调用show()方法搞定 ###07.05_面向对象(手机类的代码及测试)(掌握) A:案例演示 模仿学生类，完成手机类代码 ###07.06_面向对象(创建一个对象的步骤)(掌握) A:画图演示 画图说明一个对象的创建过程做了哪些事情? Student s = new Student(); 1,Student.class加载进内存 2,声明一个Student类型引用s 3,在堆内存创建对象, 4,给对象中属性默认初始化值 5,属性进行显示初始化 6,构造方法进栈,对对象中的属性赋值,构造方法弹栈 7,将对象的地址值赋值给s ###07.07_面向对象(长方形案例练习)(掌握) A:案例演示 需求： 定义一个长方形类,定义 求周长和面积的方法， 然后定义一个测试类进行测试。 ###07.08_面向对象(员工类案例练习)(掌握) A:案例演示 需求：定义一个员工类Employee 自己分析出几个成员，然后给出成员变量 姓名name,工号id,工资salary 构造方法， 空参和有参的 getXxx()setXxx()方法， 以及一个显示所有成员信息的方法。并测试。 work ###07.09_面向对象(static关键字及内存图)(了解) A:案例演示 通过一个案例引入static关键字。 人类：Person。每个人都有国籍，中国。 B:画图演示 带有static的内存图 ###07.10_面向对象(static关键字的特点)(掌握) A:static关键字的特点 a:随着类的加载而加载 b:优先于对象存在 c:被类的所有对象共享 举例：咱们班级的学生应该共用同一个班级编号。 其实这个特点也是在告诉我们什么时候使用静态? 如果某个成员变量是被所有对象共享的，那么它就应该定义为静态的。 举例： 饮水机(用静态修饰) 水杯(不能用静态修饰) 共性用静态,特性用非静态 d:可以通过类名调用 其实它本身也可以通过对象名调用。 推荐使用类名调用。 静态修饰的内容一般我们称其为：与类相关的，类成员 B:案例演示 static关键字的特点 ###07.11_面向对象(static的注意事项)(掌握) A:static的注意事项 a:在静态方法中是没有this关键字的 如何理解呢? 静态是随着类的加载而加载，this是随着对象的创建而存在。 静态比对象先存在。 b:静态方法只能访问静态的成员变量和静态的成员方法 静态方法： 成员变量：只能访问静态变量 成员方法：只能访问静态成员方法 非静态方法： 成员变量：可以是静态的，也可以是非静态的 成员方法：可是是静态的成员方法，也可以是非静态的成员方法。 简单记： 静态只能访问静态。 B:案例演示 static的注意事项 ###07.12_面向对象(静态变量和成员变量的区别)(掌握) 静态变量也叫类变量 成员变量也叫对象变量 A:所属不同 静态变量属于类，所以也称为为类变量 成员变量属于对象，所以也称为实例变量(对象变量) B:内存中位置不同 静态变量存储于方法区的静态区 成员变量存储于堆内存 C:内存出现时间不同 静态变量随着类的加载而加载，随着类的消失而消失 成员变量随着对象的创建而存在，随着对象的消失而消失 D:调用不同 静态变量可以通过类名调用，也可以通过对象调用 成员变量只能通过对 象名调用 ###07.13_面向对象(main方法的格式详细解释)(了解) A:格式 public static void main(String[] args) {} B:针对格式的解释 public 被jvm调用，访问权限足够大。 static 被jvm调用，不用创建对象，直接类名访问 void被jvm调用，不需要给jvm返回值 main 一个通用的名称，虽然不是关键字，但是被jvm识别 String[] args 以前用于接收键盘录入的 C:演示案例 通过args接收键盘例如数据 ###07.14_面向对象(工具类中使用静态)(了解) A:制作一个工具类 ArrayTool 1,获取最大值 2,数组的遍历 3,数组的反转 ###07.15_面向对象(说明书的制作过程)(了解) A:对工具类加入文档注释 B:通过javadoc命令生成说明书 @author(提取作者内容) @version(提取版本内容) javadoc -d 指定的文件目录 -author -version ArrayTool.java @param 参数名称//形式参数的变量名称@return 函数运行完返回的数据 ###07.16_面向对象(如何使用JDK提供的帮助文档)(了解) A:找到文档，打开文档 B:点击显示，找到索引，出现输入框 C:你应该知道你找谁?举例：Scanner D:看这个类的结构(需不需要导包) 成员变量 字段 构造方法 构造方法 成员方法 方法 ###07.17_面向对象(学习Math类的随机数功能)(了解) 打开JDK提供的帮助文档学习 A:Math类概述 类包含用于执行基本数学运算的方法 B:Math类特点 由于Math类在java.lang包下，所以不需要导包。 因为它的成员全部是静态的,所以私有了构造方法 C:获取随机数的方法 public static double random():返回带正号的 double 值，该值大于等于 0.0 且小于 1.0。 D:我要获取一个1-100之间的随机数，肿么办? int number = (int)(Math.random()*100)+1; ###07.18_面向对象(猜数字小游戏案例)(了解) A:案例演示 需求：猜数字小游戏(数据在1-100之间) ###07.19_day07总结把今天的知识点总结一遍。","categories":[{"name":"Java基础","slug":"Java基础","permalink":"https://yunxi97.github.io/categories/Java基础/"}],"tags":[{"name":"static关键字","slug":"static关键字","permalink":"https://yunxi97.github.io/tags/static关键字/"},{"name":"变量","slug":"变量","permalink":"https://yunxi97.github.io/tags/变量/"}]},{"title":"Java运算符","slug":"day04笔记","date":"2018-08-19T16:00:00.000Z","updated":"2018-09-20T11:26:17.218Z","comments":true,"path":"2018/08/20/day04笔记/","link":"","permalink":"https://yunxi97.github.io/2018/08/20/day04笔记/","excerpt":"","text":"###04.01_Java语言基础(循环结构概述和for语句的格式及其使用) A:循环结构的分类 for,while,do…while B:循环结构for语句的格式： for(初始化表达式;条件表达式;循环后的操作表达式) { 循环体; } C执行流程： a:执行初始化语句 b:执行判断条件语句,看其返回值是true还是false 如果是true，就继续执行 如果是false，就结束循环 c:执行循环体语句; d:执行循环后的操作表达式 e:回到B继续。 D:案例演示 在控制台输出10次”helloworld” ###04.02_Java语言基础(循环结构for语句的练习之获取数据) A:案例演示 需求：请在控制台输出数据1-10 需求：请在控制台输出数据10-1 B:注意事项 a:判断条件语句无论简单还是复杂结果是boolean类型。 b:循环体语句如果是一条语句，大括号可以省略；如果是多条语句，大括号不能省略。建议永远不要省略。 c:一般来说：有左大括号就没有分号，有分号就没有左大括号 ###04.03_Java语言基础(循环结构for语句的练习之求和思想) A:案例演示 需求：求出1-10之间数据之和 B:学生练习 需求：求出1-100之间偶数和 需求：求出1-100之间奇数和 ###04.04_Java语言基础(循环结构for语句的练习之水仙花) A:案例演示 需求：在控制台输出所有的”水仙花数” 所谓的水仙花数是指一个三位数，其各位数字的立方和等于该数本身。 举例：153就是一个水仙花数。 153 = 111 + 555 + 333 = 1 + 125 + 27 = 153 ###04.05_Java语言基础(循环结构for语句的练习之统计思想) A:案例演示 需求：统计”水仙花数”共有多少个 ###04.06_Java语言基础(循环结构while语句的格式和基本使用) A:循环结构while语句的格式： while循环的基本格式：while(判断条件语句) { 循环体语句;} 完整格式： 初始化语句;while(判断条件语句) { 循环体语句; 控制条件语句;} B:执行流程： a:执行初始化语句 b:执行判断条件语句,看其返回值是true还是false 如果是true，就继续执行 如果是false，就结束循环 c:执行循环体语句; d:执行控制条件语句 e:回到B继续。 C:案例演示 需求：请在控制台输出数据1-10 ###04.07_Java语言基础(循环结构while语句的练习) A:求和思想 求1-100之和 B:统计思想 统计”水仙花数”共有多少个 ###04.08_Java语言基础(循环结构do…while语句的格式和基本使用) A:循环结构do…while语句的格式： do { 循环体语句; }while(判断条件语句); 完整格式； 初始化语句; do { 循环体语句; 控制条件语句; }while(判断条件语句); B:执行流程： a:执行初始化语句 b:执行循环体语句; c:执行控制条件语句 d:执行判断条件语句,看其返回值是true还是false 如果是true，就继续执行 如果是false，就结束循环 e:回到b继续。 C:案例演示 需求：请在控制台输出数据1-10 ###04.09_Java语言基础(循环结构三种循环语句的区别) A:案例演示 三种循环语句的区别: do…while循环至少执行一次循环体。 而for,while循环必须先判断条件是否成立，然后决定是否执行循环体语句。 B:案例演示 for循环和while循环的区别： A:如果你想在循环结束后，继续使用控制条件的那个变量，用while循环，否则用for循环。不知道用谁就用for循环。因为变量及早的从内存中消失，可以提高内存的使用效率。 ###04.10_Java语言基础(循环结构注意事项之死循环) A:一定要注意控制条件语句控制的那个变量的问题，不要弄丢了，否则就容易死循环。 B:两种最简单的死循环格式 while(true){…} for(;;){…} ###04.11_Java语言基础(循环结构循环嵌套输出4行5列的星星) A:案例演示 需求：请输出一个4行5列的星星(*)图案。 如图： ***** ***** ***** ***** 注意： System.out.println(&quot;*&quot;);和System.out.print(&quot;*&quot;);的区别 B:结论： 外循环控制行数，内循环控制列数 ###04.12_Java语言基础(循环结构循环嵌套输出正三角形) A:案例演示 需求：请输出下列的形状 * ** *** **** ***** ###04.13_Java语言基础(循环结构九九乘法表) A:案例演示 需求：在控制台输出九九乘法表。 B:代码优化 注意： &apos;\\x&apos; x表示任意，\\是转义符号,这种做法叫转移字符。 &apos;\\t&apos; tab键的位置 &apos;\\r&apos; 回车 &apos;\\n&apos; 换行 &apos;\\&quot;&apos; &apos;\\&apos;&apos; ###04.14_Java语言基础(控制跳转语句break语句) A:break的使用场景 只能在switch和循环中 ###04.15_Java语言基础(控制跳转语句continue语句) A:continue的使用场景 只能在循环中 ###04.16_Java语言基础(控制跳转语句标号) 标号:标记某个循环对其控制 标号组成规则:其实就是合法的标识符 ###04.17_Java语言基础(控制调整语句练习) A:练习题 for(int x=1; x&lt;=10; x++) { if(x%3==0) { //在此处填写代码 } System.out.println(“Java基础班”); } 我想在控制台输出2次:“Java基础班“ 我想在控制台输出7次:“Java基础班“ 我想在控制台输出13次:“Java基础班“ ###04.18_Java语言基础(控制跳转语句return语句) A:return的作用 返回 其实它的作用不是结束循环的，而是结束方法的。 B:案例演示 return和break以及continue的区别? return是结束方法 break是跳出循环 continue是终止本次循环继续下次循环 ###04.19_Java语言基础(方法概述和格式说明) A:为什么要有方法 提高代码的复用性 B:什么是方法 完成特定功能的代码块。 C:方法的格式 修饰符 返回值类型 方法名(参数类型 参数名1,参数类型 参数名2...) { 方法体语句; return 返回值; } D:方法的格式说明 修饰符：目前就用 public static。后面我们再详细的讲解其他的修饰符。 返回值类型：就是功能结果的数据类型。 方法名：符合命名规则即可。方便我们的调用。 参数： 实际参数：就是实际参与运算的。 形式参数；就是方法定义上的，用于接收实际参数的。 参数类型：就是参数的数据类型 参数名：就是变量名 方法体语句：就是完成功能的代码。 return：结束方法的。 返回值：就是功能的结果，由return带给调用者。 ###04.20_Java语言基础(方法之求和案例及其调用) A:如何写一个方法 1,明确返回值类型 2,明确参数列表 B:案例演示 需求：求两个数据之和的案例 C:方法调用图解 ###04.21_Java语言基础(方法的注意事项) A:方法调用(有具体返回值) a:单独调用,一般来说没有意义，所以不推荐。 b:输出调用,但是不够好。因为我们可能需要针对结果进行进一步的操作。 c:赋值调用,推荐方案。 B:案例演示 a:方法不调用不执行 b:方法与方法是平级关系，不能嵌套定义 c:方法定义的时候参数之间用逗号隔开 d:方法调用的时候不用在传递数据类型 e:如果方法有明确的返回值，一定要有return带回一个值 ###04.22_Java语言基础(方法的练习) A:案例演示 需求：键盘录入两个数据，返回两个数中的较大值 B:案例演示 需求：键盘录入两个数据，比较两个数是否相等 ###04.23_Java语言基础(方法之输出星形及其调用) A:案例演示 需求：根据键盘录入的行数和列数，在控制台输出星形 B:方法调用：(无返回值,void) 单独调用 输出调用(错误) 赋值调用(错误) ###04.24_Java语言基础(方法的练习) A:案例演示 需求：根据键盘录入的数据输出对应的乘法表 ###04.25_Java语言基础(方法重载概述和基本使用) A:方法重载概述 求和案例 2个整数 3个整数 4个整数 B:方法重载： 在同一个类中，方法名相同，参数列表不同。与返回值类型无关。 参数列表不同： A:参数个数不同 B:参数类型不同 C:参数的顺序不同(算重载,但是在开发中不用) ###04.26_Java语言基础(方法重载练习比较数据是否相等) A:案例演示 需求：比较两个数据是否相等。 参数类型分别为两个int类型，两个double类型，并在main方法中进行测试","categories":[{"name":"Java基础","slug":"Java基础","permalink":"https://yunxi97.github.io/categories/Java基础/"}],"tags":[{"name":"循环语句","slug":"循环语句","permalink":"https://yunxi97.github.io/tags/循环语句/"},{"name":"方法","slug":"方法","permalink":"https://yunxi97.github.io/tags/方法/"}]},{"title":"Java运算符","slug":"day03笔记","date":"2018-08-18T16:00:00.000Z","updated":"2018-09-20T11:26:42.948Z","comments":true,"path":"2018/08/19/day03笔记/","link":"","permalink":"https://yunxi97.github.io/2018/08/19/day03笔记/","excerpt":"","text":"###03.01_Java语言基础(逻辑运算符的基本用法)(掌握) A:逻辑运算符有哪些 &amp;,|,^,! &amp;&amp;,|| B:案例演示 逻辑运算符的基本用法 注意事项： a:逻辑运算符一般用于连接boolean类型的表达式或者值。 b:表达式：就是用运算符把常量或者变量连接起来的符合java语法的式子。 算术表达式：a + b 比较表达式：a == b(条件表达式) C:结论： &amp;逻辑与:有false则false。 |逻辑或:有true则true。 ^逻辑异或:相同为false，不同为true。 !逻辑非:非false则true，非true则false。 特点：偶数个不改变本身。 ###03.02_Java语言基础(逻辑运算符&amp;&amp;和&amp;的区别)(掌握) A:案例演示 &amp;&amp;和&amp;的区别? a:最终结果一样。 b:&amp;&amp;具有短路效果。左边是false，右边不执行。 &amp;是无论左边是false还是true,右边都会执行 B:同理||和|的区别?(学生自学) C:开发中常用谁? &amp;&amp;,||,! ###03.03_Java语言基础(位运算符的基本用法1)(了解) A:位运算符有哪些 &amp;,|,^,~ ,&gt;&gt;,&gt;&gt;&gt;,&lt;&lt; B:案例演示 位运算符的基本用法1 &amp;,|,^,~ 的用法 &amp;:有0则0 |:有1则1 ^:相同则0，不同则1 ~:按位取反 ###03.04_Java语言基础(位异或运算符的特点及面试题)(掌握) A:案例演示 位异或运算符的特点 ^的特点：一个数据对另一个数据位异或两次，该数本身不变。 B:面试题： 请自己实现两个整数变量的交换 注意：以后讲课的过程中，我没有明确指定数据的类型，默认int类型。 ###03.05_Java语言基础(位运算符的基本用法2及面试题)(了解) A:案例演示 &gt;&gt;,&gt;&gt;&gt;,&lt;&lt;的用法: “&lt;&lt;”:左移 左边最高位丢弃，右边补齐0 “&gt;&gt;”:右移 最高位是0，左边补齐0;最高为是1，左边补齐1 “&gt;&gt;&gt;”:无符号右移 无论最高位是0还是1，左边补齐0 最有效率的算出2 * 8的结果 ###03.06_Java语言基础(三元运算符的基本用法)(掌握) A:三元运算符的格式 (关系表达式) ? 表达式1 : 表达式2; B:三元运算符的执行流程 C:案例演示 获取两个数中的最大值 ###03.07_Java语言基础(三元运算符的练习)(掌握) A:案例演示 比较两个整数是否相同 B:案例演示 获取三个整数中的最大值 ###03.08_Java语言基础(键盘录入的基本格式讲解)(掌握) A:为什么要使用键盘录入数据 a:为了让程序的数据更符合开发的数据 b:让程序更灵活一下 B:如何实现键盘录入呢? 先照格式来。 a:导包 格式： import java.util.Scanner; 位置： 在class上面。 b:创建键盘录入对象 格式： Scanner sc = new Scanner(System.in); c:通过对象获取数据 格式： int x = sc.nextInt(); C:案例演示 键盘录入1个整数，并输出到控制台。 键盘录入2个整数，并输出到控制台。 ###03.09_Java语言基础(键盘录入的练习1)(掌握) A:案例演示 键盘录入练习：键盘录入两个数据，并对这两个数据求和，输出其结果 B:案例演示 键盘录入练习：键盘录入两个数据，获取这两个数据中的最大值 ###03.10_Java语言基础(键盘录入的练习2)(掌握) A:案例演示 键盘录入练习：键盘录入两个数据，比较这两个数据是否相等 B:案例演示 键盘录入练习：键盘录入三个数据，获取这三个数据中的最大值 ###03.11_Java语言基础(顺序结构语句)(了解) A:什么是流程控制语句 流程控制语句：可以控制程序的执行流程。 B:流程控制语句的分类 顺序结构 选择结构 循环结构 C:执行流程： 从上往下，依次执行。 D:案例演示 输出几句话看效果即可 ###03.12_Java语言基础(选择结构if语句格式1及其使用)(掌握) A:选择结构的分类 if语句 switch语句 B:if语句有几种格式 格式1 格式2 格式3 C:if语句的格式1 if(比较表达式) { 语句体; } D:执行流程： 先计算比较表达式的值，看其返回值是true还是false。 如果是true，就执行语句体； 如果是false，就不执行语句体； ###03.13_Java语言基础(选择结构if语句注意事项)(掌握) A:案例演示 a:比较表达式无论简单还是复杂，结果必须是boolean类型 b:if语句控制的语句体如果是一条语句，大括号可以省略； 如果是多条语句，就不能省略。建议永远不要省略。 c:一般来说：有左大括号就没有分号，有分号就没有左大括号 ###03.14_Java语言基础(选择结构if语句格式2及其使用)(掌握) A:if语句的格式2 if(比较表达式) { 语句体1; }else { 语句体2; } B:执行流程： 首先计算比较表达式的值，看其返回值是true还是false。 如果是true，就执行语句体1； 如果是false，就执行语句体2； C:案例演示 a:获取两个数据中较大的值 b:判断一个数据是奇数还是偶数,并输出是奇数还是偶数 注意事项：else后面是没有比较表达式的，只有if后面有。 ###03.15_Java语言基础(if语句的格式2和三元的相互转换问题)(掌握) A:案例演示 if语句和三元运算符完成同一个效果 B:案例演示 if语句和三元运算符的区别 三元运算符实现的，都可以采用if语句实现。反之不成立。 什么时候if语句实现不能用三元改进呢? 当if语句控制的操作是一个输出语句的时候就不能。 为什么呢?因为三元运算符是一个运算符，运算符操作完毕就应该有一个结果，而不是一个输出。 ###03.16_Java语言基础(选择结构if语句格式3及其使用)(掌握) A:if语句的格式3： if(比较表达式1) { 语句体1; }else if(比较表达式2) { 语句体2; }else if(比较表达式3) { 语句体3; } ... else { 语句体n+1; } B:执行流程： 首先计算比较表达式1看其返回值是true还是false， 如果是true，就执行语句体1，if语句结束。 如果是false，接着计算比较表达式2看其返回值是true还是false， 如果是true，就执行语句体2，if语句结束。 如果是false，接着计算比较表达式3看其返回值是true还是false， 如果都是false，就执行语句体n+1。 C:注意事项:最后一个else可以省略,但是建议不要省略,可以对范围外的错误值提示 ###03.17_Java语言基础(选择结构if语句格式3练习)(掌握) A:练习1 需求：键盘录入一个成绩，判断并输出成绩的等级。 90-100 优 80-89 良 70-79 中 60-69 及 0-59 差 B:练习2 需求： 键盘录入x的值，计算出y的并输出。 x&gt;=3 y = 2 * x + 1; -1&lt;x&lt;3 y = 2 * x; x&lt;=-1 y = 2 * x - 1; ###03.18_Java语言基础(选择结构if语句的嵌套使用)(掌握) A:案例演示 需求：获取三个数据中的最大值 if语句的嵌套使用。 ###03.19_Java语言基础(选择结构switch语句的格式及其解释)(掌握) A:switch语句的格式 switch(表达式) { case 值1： 语句体1; break; case 值2： 语句体2; break; … default： 语句体n+1; break; } B:switch语句的格式解释 C:面试题 byte可以作为switch的表达式吗? long可以作为switch的表达式吗? String可以作为switch的表达式吗? C:执行流程 先计算表达式的值 然后和case后面的匹配，如果有就执行对应的语句，否则执行default控制的语句 ###03.20_Java语言基础(选择结构switch语句的练习)(掌握) A:整数(给定一个值,输出对应星期几) ###03.21_Java语言基础(选择结构switch语句的注意事项)(掌握) A:案例演示 a:case后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的 b:default可以省略吗? 可以省略，但是不建议，因为它的作用是对不正确的情况给出提示。 特殊情况： case就可以把值固定。 A,B,C,D c:break可以省略吗? 最后一个可以省略,其他最好不要省略 会出现一个现象：case穿透。 最终我们建议不要省略 d:default一定要在最后吗? 不是，可以在任意位置。但是建议在最后。 e:switch语句的结束条件 a:遇到break就结束了 b:执行到switch的右大括号就结束了 ###03.22_Java语言基础(选择结构switch语句练习)(掌握) A:看程序写结果： int x = 2; int y = 3; switch(x){ default: y++; break; case 3: y++; case 4: y++; } System.out.println(&quot;y=&quot;+y); B:看程序写结果： int x = 2; int y = 3; switch(x){ default: y++; case 3: y++; case 4: y++; } System.out.println(&quot;y=&quot;+y); ###03.23_Java语言基础(选择结构if语句和switch语句的区别)(掌握) A:总结switch语句和if语句的各自使用场景 switch建议判断固定值的时候用 if建议判断区间或范围的时候用 B:案例演示 分别用switch语句和if语句实现下列需求： 键盘录入月份，输出对应的季节","categories":[{"name":"Java基础","slug":"Java基础","permalink":"https://yunxi97.github.io/categories/Java基础/"}],"tags":[{"name":"java运算符","slug":"java运算符","permalink":"https://yunxi97.github.io/tags/java运算符/"},{"name":"java选择语句","slug":"java选择语句","permalink":"https://yunxi97.github.io/tags/java选择语句/"}]},{"title":"Java语言基础","slug":"day01笔记","date":"2018-08-17T16:00:00.000Z","updated":"2018-09-20T11:26:35.771Z","comments":true,"path":"2018/08/18/day01笔记/","link":"","permalink":"https://yunxi97.github.io/2018/08/18/day01笔记/","excerpt":"","text":"###01.01_计算机基础知识(计算机概述)(了解) A:什么是计算机?计算机在生活中的应用举例 计算机（Computer）全称：电子计算机，俗称电脑。是一种能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。由硬件和软件所组成，没有安装任何软件的计算机称为裸机。常见的形式有台式计算机、笔记本计算机、大型计算机等。 应用举例 1：科学计算 2、数据处理 3、自动控制 4、计算机辅助设计 5、人工智能 6、多媒体应用 7、计算机网络 … B:什么是硬件?硬件举例 计算机硬件（Computer Hardware）是指计算机系统中由电子，机械和光电元件等组成的各种物理装置的总称。这些物理装置按系统结构的要求构成一个有机整体为计算机软件运行提供物质基础。 冯.诺依曼体系结构 计算机的硬件分成5大组成部件：运算器、控制器、存储器、输入设备和输出设备。 运算器和控制器是计算机的核心，合称中央处理单元（Central Processing Unit，CPU）或处理器。CPU的内部还有一些高速存储单元，被称为寄存器。其中运算器执行所有的算术和逻辑运算；控制器负责把指令逐条从存储器中取出，经译码后向计算机发出各种控制命令；而寄存器为处理单元提供操作所需要的数据。 存储器是计算机的记忆部分，用来存放程序以及程序中涉及的数据。它分为内部存储器和外部存储器。内部存储器用于存放正在执行的程序和使用的数据，其成本高、容量小，但速度快。外部存储器可用于长期保存大量程序和数据，其成本低、容量大，但速度较慢。 输入设备和输出设备统称为外部设备，简称外设或I/O设备，用来实现人机交互和机间通信。微型机中常用的输入设备有键盘、鼠标等，输出设备有显示器、打印机等。 C:什么是软件?软件分类及举例 计算机软件(Computer Software)是使用计算机过程中必不可少的东西，计算机软件可以使计算机按照事先预定好的顺序完成特定的功能 计算机软件按照其功能划分为系统软件与应用软件 系统软件： DOS(Disk Operating System), Windows, Linux, Unix, Mac, Android, iOS 应用软件：office QQ聊天 YY语言 扫雷###01.02_计算机基础知识(软件开发和计算机语言概述)(了解) A:什么是软件 按照特定顺序组织的计算机数据和指令的集合 B:什么是开发 软件的制作过程 C:什么是软件开发 借助开发工具与计算机语言制作软件 D:什么是计算机语言 人与计算机之间进行信息交流沟通的一种特殊语言 E:计算机语言的分类 机器语言： 机器语言是直接用二进制代码指令表达的计算机语言，指令是用0和1组成的一串代码，它们有一定的位数，并分成若干段，各段的编码表示不同的含义。 汇编语言： 汇编语言是使用一些特殊的符号来代替机器语言的二进制码，计算机不能直接识别，需要用一种软件将汇编语言翻译成机器语言。 高级语言： 使用普通英语进行编写源代码，通过编译器将源代码翻译成计算机直接识别的机器语言，之后再由计算机执行。 高级语言包括C,C++,C#,JAVA###01.03_计算机基础知识(人机交互)(了解) A:人机交互的两种方式 a:命令行方式 需要有一个控制台，输入特定的指令，让计算机完成一些操作。较为麻烦，需要记录住一些命令。 b:图形化界面方式 这种方式简单直观，使用者易于接受，容易上手操作。 ###01.04_计算机基础知识(键盘功能键和快捷键)(掌握) A:键盘功能键 a:Tab b:Shift c:Ctrl d:Alt e:空格 f:Enter g:Window h:上下左右键 i:PrtSc(PrintScreen)屏幕截图 B:键盘快捷键 a:Ctrl+A 全选 b:Ctrl+C 复制 c:Ctrl+V 粘贴 d:Ctrl+X 剪切 e:Ctrl+Z 撤销 f:Ctrl+S 保存 ###01.05_计算机基础知识(如何打开DOS控制台)(掌握) A:xp下如何打开DOS控制台？ a:开始–程序–附件–命令提示符 b:开始–运行–cmd–回车 c:win+r–cmd–回车 B:win7下如何打开DOS控制台？ a:开始–所有程序–附件–命令提示符 b:开始–搜索程序和文件–cmd–回车 c:win+r–cmd–回车 C:win8下如何打开DOS控制台 a:鼠标左击开始–下箭头–命令提示符 b:鼠标右击开始–搜索–cmd–回车 c:鼠标右击开始–运行–cmd–回车 d:win+r–cmd–回车 ###01.06_计算机基础知识(常见的DOS命令讲解) A:d: 回车 盘符切换 B:dir(directory):列出当前目录下的文件以及文件夹 C:cd (change directory)改变指定目录(进入指定目录) D:cd.. : 退回到上一级目录 E:cd\\: 退回到根目录 F:cls : (clear screen)清屏 G:exit : 退出dos命令行(分割线上的需要掌握,下的了解) /========================================================= md (make directory) : 创建目录 rd (remove directory): 删除目录 del (delete): 删除文件,删除一堆后缀名一样的文件*.txt notepad 创建文件 删除带内容的文件夹 rd + /s 文件夹名称(询问是否删除) rd + /q + /s 文件夹名称(直接删除) ###01.07_Java语言基础(Java语言概述)(了解) A:Java语言发展史 詹姆斯·高斯林（James Gosling）1977年获得了加拿大卡尔加里大学计算机科学学士学位，1983年获得了美国卡内基梅隆大学计算机科学博士学位，毕业后到IBM工作，设计IBM第一代工作站NeWS系统，但不受重视。后来转至Sun公司，1990年，与Patrick，Naughton和Mike Sheridan等人合作“绿色计划”，后来发展一套语言叫做“Oak”，后改名为Java。 SUN(Stanford University Network，斯坦福大学网络公司) B:Java语言版本 JDK 1.1.4 Sparkler 宝石 1997-09-12 JDK 1.1.5 Pumpkin 南瓜 1997-12-13 JDK 1.1.6 Abigail 阿比盖尔–女子名 1998-04-24 JDK 1.1.7 Brutus 布鲁图–古罗马政治家和将军 1998-09-28 JDK 1.1.8 Chelsea 切尔西–城市名 1999-04-08 J2SE 1.2 Playground 运动场 1998-12-04 J2SE 1.2.1 none 无 1999-03-30 J2SE 1.2.2 Cricket 蟋蟀 1999-07-08 J2SE 1.3 Kestrel 美洲红隼(sǔn) 2000-05-08 J2SE 1.3.1 Ladybird 瓢虫 2001-05-17 J2SE 1.4.0 Merlin 灰背隼 2002-02-13 J2SE 1.4.1 grasshopper 蚱蜢 2002-09-16 J2SE 1.4.2 Mantis 螳螂 2003-06-26 JAVASE 5.0 (1.5.0) Tiger 老虎 JAVASE 5.1 (1.5.1) Dragonfly 蜻蜓 JAVASE 6.0 (1.6.0) Mustang 野马 JAVASE 7.0 (1.7.0) Dolphin 海豚 C:Java语言平台 J2SE(Java 2 Platform Standard Edition)标准版 是为开发普通桌面和商务应用程序提供的解决方案,该技术体系是其他两者的基础，可以完成一些桌面应用程序的开发 J2ME(Java 2 Platform Micro Edition)小型版 是为开发电子消费产品和嵌入式设备提供的解决方案 J2EE(Java 2 Platform Enterprise Edition)企业版 是为开发企业环境下的应用程序提供的一套解决方案,该技术体系中包含的技术如 Servlet、Jsp等，主要针对于Web应用程序开发 D:Java语言特点 简单性 解释性 面向对象 高性能 分布式处理 多线程 健壮性 动态 结构中立 安全性 开源 跨平台###01.08_Java语言基础(Java语言跨平台原理)(掌握) A:什么是跨平台性 B:Java语言跨平台原理 只要在需要运行java应用程序的操作系统上，先安装一个Java虚拟机(JVM Java Virtual Machine)即可。由JVM来负责Java程序在该系统中的运行。 C:Java语言跨平台图解 write once ,run anywhere!(一处编译,到处运行)###01.09_Java语言基础(JRE和JDK的概述)(掌握) A:什么是JRE 包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。 JRE:JVM+类库。 B:什么是JDK JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。 其中的开发工具：编译工具(javac.exe) 打包工具(jar.exe)等 JDK:JRE+JAVA的开发工具。 C:为什么JDK中包含一个JRE 为什么JDK中包含一个JRE呢？ 开发完的程序，需要运行一下看看效果。 D:JDK,JRE,JVM的作用和关系###01.10_Java语言基础(JDK的下载和安装过程图解)(了解) A:JDK的下载 a:官网 http://www.oracle.com b:演示下载流程 B:JDK的安装 a:傻瓜式安装 双击安装程序，然后一路next即可(但是不建议) b:安装的推荐方式 安装路径不要有中文或者特殊符号如空格等。 所有和开发相关的软件最好安装目录统一。 举例：我的JDK安装路径 D:\\develop\\Java\\jdk1.7.0_72 当提示安装JRE时，可以选择不安装。建议还是安装上。 c:演示安装流程 可以先在d盘建立一个文件夹develop 然后演示安装过程 C:验证安装是否成功 a:通过DOS命令，切换到JDK安装的bin目录下。 D:\\develop\\Java\\jdk1.7.0_72\\bin b:然后分别输入javac和java，如果正常显示一些内容，说明安装成功 ###01.11_Java语言基础(JDK安装路径下的目录解释)(了解) a:bin目录：该目录用于存放一些可执行程序。 如javac.exe（java编译器）、java.exe(java运行工具)，jar.exe(打包工具)和* javadoc.exe(文档生成工具)等。 b:db目录：db目录是一个小型的数据库。 从JDK 6.0开始，Java中引用了一个新的成员JavaDB，这是一个纯Java实现、开源的数据库管理系统。这个数据库不仅轻便，而且支持JDBC 4.0所有的规范，在学习JDBC 时，不再需要额外地安装一个数据库软件，选择直接使用JavaDB即可。 c:jre目录：”jre”是 Java Runtime Environment 的缩写，意为Java程序运行时环境。此目录是Java运行时环境的根目录，它包括Java虚拟机，运行时的类包，Java应用启动器以及一个bin目录，但不包含开发环境中的开发工具。 d:include目录：由于JDK是通过C和C++实现的，因此在启动时需要引入一些C语言的头文件，该目录就是用于存放这些头文件的。 e:lib目录：lib是library的缩写，意为 Java 类库或库文件，是开发工具使用的归档包文件。 f:src.zip文件：src.zip为src文件夹的压缩文件，src中放置的是JDK核心类的源代码，通过该文件可以查看Java基础类的源代码。 ###01.12_Java语言基础(Java开发工具介绍)(了解) A:notepad(微软操作系统自带) B:Editplus/Notepad++ C:Eclipse D:MyEclipse 给大家简单的介绍一下这些工具，然后说说我们使用这些工具的顺序。 基础班：先notepad，然后Editplus，再Eclipse。 就业班：MyEclipse和Eclipse都用。 ###01.13_Java语言基础(HelloWorld案例的编写和运行)(掌握) A:定义类 B:写main方法 C:写输出语句 D:Java程序开发运行与工作原理 E:编译和运行程序 class HelloWorld { public static void main(String[] args) { System.out.println(&quot;HelloWorld&quot;); } } ###01.14_Java语言基础(HelloWorld案例常见问题)(掌握) A:找不到文件(都演示一下，让学生看看出现的都是什么问题) a:文件扩展名隐藏导致编译失败 b:文件名写错了 B:单词拼写问题(都演示一下，让学生看看出现的都是什么问题) a:class写成Class b:String写成string c:System写成system d:main写成mian C:括号匹配问题(都演示一下，让学生看看出现的都是什么问题) a:把类体的那对大括号弄掉一个 b:把方法体的那对大括号弄掉一个 c:把输出语句的那对小括号弄掉一个 D:中英文问题(都演示一下，让学生看看出现的都是什么问题) a:提示信息：错误: 非法字符: \\????的格式 注意：java编程中需要的基本上都是英文字符 ###01.15_Java语言基础(Java语言的书写格式(约定俗成)) (掌握) 1,大括号要对齐,并且成对写 2,左大括号前面有空格 3,遇到左大括号要缩进,Tab 4,方法和程序块之间加空行让程序看起来清晰 5,并排语句之间加空格,例如for语句 6,运算符两侧加空格 ###01.16_Java语言基础(path环境变量的作用及配置方式1)(掌握) A:在JDK的bin目录下开发程序容易产生的问题 a:如果文件过多，不方便管理 b:删除自己写过的不需要的文件，可能不小心把JDK自带的工具给删除了 B:如何解决问题呢 notepad这样的命令为什么在任何路径下都能够执行,配置path环境变量 C:配置方式 a:xp系统 右键点击桌面计算机→选择属性→选择高级选项卡→点击环境变量→下方系统变量中查找path→双击path→将jdk安装目录下的bin目录添加到最左边并添加分号。 b:win7/win8系统 右键点击桌面计算机→选择属性→选择高级系统设置→选择高级选项卡→点击环境变量→下方系统变量中查找path→双击path→将jdk安装目录下的bin目录添加到最左边并添加分号。 path配置的是可执行的文件.exe,配置后可以在不同的盘符下访问path路径下的可执行文件 ###01.17_Java语言基础(Path环境变量的配置方式2)(掌握) A:先配置JAVA_HOME B:再修改path C:最后说一下path是有先后顺序关系的 ###01.18_Java语言基础(classpath环境变量的作用及其配置)(了解) A:为什么要配置classpath B:classpath配置的原理 C:如何配置classpath path和classpath的区别 path配置的是可执行的文件.exe,配置后可以在不同的盘符下访问path路径下的可执行文件 classpath配置的java的类文件,就是.class文件 ###01.19_Java语言基础(Editplus开发程序并编译运行)(了解) A:配置快捷键编译运行 B:去除备份文件 ###01.20_Java语言基础(注释概述及其分类)(掌握) A:什么是注释 B:注释的分类及讲解 文档注释目前不讲，说后面讲解 注释的作用 A:解释说明程序 B:帮助我们调试错误 ###01.21_Java语言基础(关键字的概述和使用)(掌握) A:什么是关键字 被Java语言赋予特定含义的单词 B:关键字的特点 组成关键字的字母全部小写 C:常见关键字 public static void class等 D:关键字的注意事项 goto和const作为保留字存在,目前并不使用,类似Editplus这样的高级记事本,针对关键字有特殊的颜色标记，非常直观 ###01.22_Java语言基础(标识符的概述和组成规则)(掌握) A:什么是标识符 就是给类,接口,方法,变量等起名字时使用的字符序列 B:标识符的组成规则 英文大小写字母 数字字符 $和_ C:标识符注意事项 1,不能使用关键字 2,不能数字开头 ###01.23_Java语言基础(标识符中常见的命名规则)(了解) 见名知意 A:包 最好是域名倒过来,要求所有的字母小写 B:类或者接口 如果是一个单词首字母大写 如果是多个单词每个单词首字母大写(驼峰标识) C:方法或者变量 如果是一个单词全部小写 如果是多个单词,从第二个单词首字母大写 D:常量 如果是一个单词,所有字母大写 如果是多个单词,所有的单词大写,用下划线区分每个单词","categories":[{"name":"Java基础","slug":"Java基础","permalink":"https://yunxi97.github.io/categories/Java基础/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"https://yunxi97.github.io/tags/java基础/"},{"name":"计算机基础知识","slug":"计算机基础知识","permalink":"https://yunxi97.github.io/tags/计算机基础知识/"}]}]}